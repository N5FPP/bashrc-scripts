# .projectrc-tsunami
#------------------------------------------------------------------------------

# d1e03c6
# 2018-12-01 16:21:48 -0700

if [ "${PS1}" ]; then
  echo "Loading local project configuration for $(hostname)..."
fi

#------------------------------------------------------------------------------
# Project support

if [ -z "${MYPROJECT}" ] && [ -f ~/".myproject-${HOST}" ]; then
  export MYPROJECT=$(cat ~/".myproject-${HOST}")
fi

if [ "${MYPROJECT}" ]; then
  export PROJECT_HOME=${MYPROJECT:+${HOME}/Projects/${MYPROJECT}}
fi

if [ "${PS1}" ]; then
  echo "Current project:  ${MYPROJECT:-NONE}"
fi

#------------------------------------------------------------------------------
# generate-changelog.pl environment variables

export GITLAB_CACERT=~/.Rhinocorps-CA.crt
export GITLAB_TOKEN=w_ssHyoYPYb6Z-QVkdby

#------------------------------------------------------------------------------
# Paths

# My fundamental path - this stuff at the absolute front fo the path

export MY_PATH=$(mkpath  						\
	$(quote ${MY_PATH})						\
	${PYBOMBS_PREFIX}/bin						\
	${HOME}/mingw64/bin						\
	${HOME}/.cargo/bin						\
	${HOME}/.local/bin						\
	${HOME}/.scripts/*						\
	/opt/install/sdrangel/bin/					\
	"/e/Program\ Files/nodejs"  					\
	/e/tools/apache-ant-1.10.5/bin  				\
	"/c/Program\ Files/Docker Toolbox"  				\
	/c/Users/pascal/AppData/Local/Microsoft/WindowsApps  		\
	/c/Users/pascal/AppData/Roaming/npm  				\
)

debug MY_PATH = $(quote ${MY_PATH})

export HOST_PATH=$(mkpath  						\
	$(quote ${HOST_PATH})						\
	/local/STMicroelectronics/STM32Cube/STM32CubeMX/		\
	/Library/Groovy/bin						\
)

# Package Configs

export PKG_CONFIG_PATH=$(mkpath  					\
	/usr/local/Cellar/libpng12/1.2.54/lib/pkgconfig			\
	/usr/local/share/pkgconfig					\
	/usr/local/lib/pkgconfig					\
	/usr/local/opt/qt5/lib/pkgconfig				\
	/usr/local/Library/ENV/pkgconfig				\
	/usr/local/Library/Aliases/pkgconfig				\
	/opt/X11/lib/pkgconfig						\
	/opt/X11/share/pkgconfig					\
	/usr/lib/pkgconfig						\
)

# Golang

export GOPATH=${HOME}/Go
export MY_PATH=$(mkpath  						\
	$(quote ${MY_PATH})						\
	${GOPATH}/bin							\
)

debug MY_PATH = $(quote ${MY_PATH})

# Java paths

export JAVA_HOME=$(findpath 						\
	$(update-java-alternatives -l | cut -c43-)			\
	/Library/Java/Home						\
)

if [ "${PS1}" ]; then
  echo "Java home:  ${JAVA_HOME:-NONE}"
fi

# Development tools paths

export PROJECT_PATH=$(mkfilepath 					\
    	${PROJECT_HOME}/rhinocorps/bin          			\
	${JAVA_HOME}/bin						\
	/opt/*/bin							\
	/opt/*								\
)

#export PROJECT_CLASSPATH=$(mkfilepath 					\
#)

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(mkfilepath 			\
	/opt/install/libsdrplay/lib					\
)

# Build a CDPATH variable.
#
# The 'find' comand returns all directories under current project.
# The results are cached in ~/.config/my-cdpath.txt to speed up
# signon.
#
export CDPATH_CACHE=~/.config/my-cdpath.txt
if [ -f ${CDPATH_CACHE} ] ; then
    export CDPATH=$( mkpath $( cat ${CDPATH_CACHE} ) )
else
    export CDPATH=$(                            \
        mkpath                                  \
            .                                   \
            ..                                  \
            ../..                               \
            ../../..                            \
            ${HOME}                             \
            ${HOME}/Documents                   \
            ${HOME}/Documents/Rhinocorps	\
            $( ~/.cargo/bin/fd			\
                    -Hip '.git$'		\
                    /e/SimajinWork              \
                    ${HOME}/Workspaces		\
                    -x realpath {//}/..		\
                | sort | uniq )                 \
            /e                                  \
            /s                                  \ 
            /s/intermediates                    \
    )
fi
echo $CDPATH > ${CDPATH_CACHE}

# Simajin Workspace
export WORKSPACE=/e/SimajinWork

alias grep="grep --color"

alias ..="cd .."
alias .2="cd ../.."
alias .3="cd ../../.."
alias .4="cd ../../../.."

#------------------------------------------------------------------------------
# Internet development support

# Update current Simajin workspace Simajin instances with default keys and
# and properties from the root of the workspace
alias install-keys="cp ${WORKSPACE}/*.key ${WORKSPACE}/*.properties ${WORKSPACE}/Simajin/execs"
alias snapshot-keys="cp ${WORKSPACE}/Simajin/execs/{*.key,*.properties} ${WORKSPACE}/"

# GIT aliases
alias gdh="git diff HEAD~1..HEAD"

git-refresh () {
    # Loop through provided paths or anything with a .git directory in it.
    for project_dir in ${@:-$( fd                   \
                                --hidden --type d   \
                                --exclude .metadata \
                                --exclude localdeps \
                                --exclude \*-       \
                                .git --exec dirname \
                                    | tee /proc/$$/fd/2 
                            )}
    do
        echo -e "\nRefreshing ${project_dir}...\n"
        (
            cd ${project_dir} \
                && if [ -z "$( git status --porcelain --untracked-files=no )" ]; then 
                        git switch master \
                        && git fetch \
                        && git pull
                   else
                        echo "Pending changes... skipping." >&2
                   fi
        )
    done
}

gitsum () {
  git for-each-ref | grep -v refs\/remotes | sort | git hash-object --stdin
}

gdc () {
  local COMMIT=${1:-HEAD}

  git diff ${COMMIT}~ ${COMMIT}
}

simlog () {
  local LOG_FILE=$( \ls -1t ${WORKSPACE:-/e/SimajinWork}/Simajin/execs/logs/*.log | head -1 )
  less ${LOG_FILE:-${1}}
}

simout () {
  local latest=$( \ls -1t ${WORKSPACE:-/e/SimajinWork}/SimajinProjects/${1:-lone_pine}/output/${2:-Study_Run}/${3:-*.dat} | head -1 )
  less ${latest} 
}

alias snapshot-keys="cp ${WORKSPACE}/Simajin/execs/{*.key,*.properties} ${WORKSPACE}/"

# GIT aliases
alias gdh="git diff HEAD~1..HEAD"

useproject() {
  if [ $# -ne 1 ]; then
    echo 'Usage: useproject {project id}'				1>&2
  fi

  export MYPROJECT=$1

  exec "${SHELL}"
}

setproject() {
  if [ $# -ne 1 ]; then
    echo 'Usage: setproject {project id}'				1>&2
  fi

  echo "${1}" > ~/".myproject-${HOST}"

  unset MYPROJECT

  exec "${SHELL}"
}

pcd() {
  pushd "${PROJECT_HOME}/${1:+/$1}"
}

alias cmakeEclipse='cmake -G"Eclipse CDT4 - Unix Makefiles" -D CMAKE_BUILD_TYPE=Debug ../'

